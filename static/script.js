/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ API –±—ç–∫–µ–Ω–¥–∞:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ drag & drop
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * - –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
 * - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Python –±—ç–∫–µ–Ω–¥–æ–º —á–µ—Ä–µ–∑ REST API
 */

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
 */

document.addEventListener('DOMContentLoaded', () => {
    const heroPage = document.getElementById('hero-page');
    const mainAppPage = document.getElementById('main-app-page');
    const gotoAppButton = document.getElementById('goto-app-button');
    const navButtons = document.querySelectorAll('.app-nav__button');
    const uploadView = document.getElementById('upload-view');
    const imagesView = document.getElementById('images-view');
    const dropZone = document.getElementById('upload-drop-zone');
    const fileInput = document.getElementById('file-input');
    const browseBtn = document.getElementById('browse-btn');
    const uploadError = document.getElementById('upload-error');
    const urlInput = document.getElementById('url-input');
    const copyBtn = document.getElementById('copy-btn');
    const imageList = document.getElementById('image-list');
    const imageItemTemplate = document.getElementById('image-item-template');

    const heroImages = [
        'static/assets/images/bird.png',
        'static/assets/images/cat.png',
        'static/assets/images/dog1.png',
        'static/assets/images/dog2.png',
        'static/assets/images/dog3.png'
    ];

    let uploadedImages = [];
    let originalContent = dropZone.innerHTML; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ LocalStorage
    try {
        const savedImages = localStorage.getItem('uploadedImages');
        if (savedImages) {
            uploadedImages = JSON.parse(savedImages);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ LocalStorage:', uploadedImages.length);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ LocalStorage:', error);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –≤ LocalStorage
    function saveToLocalStorage() {
        try {
            localStorage.setItem('uploadedImages', JSON.stringify(uploadedImages));
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ LocalStorage:', uploadedImages.length, '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ LocalStorage:', error);
        }
    }

    function setRandomHeroImage() {
        const randomIndex = Math.floor(Math.random() * heroImages.length);
        const randomImage = heroImages[randomIndex];
        heroPage.style.backgroundImage = `url(${randomImage})`;
    }

    gotoAppButton.addEventListener('click', () => {
        heroPage.classList.add('hidden');
        mainAppPage.classList.remove('hidden');

        if (uploadedImages.length > 0) {
            renderImages();
        }
    });

    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            const view = button.dataset.view;
            navButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            if (view === 'upload') {
                uploadView.classList.remove('hidden');
                imagesView.classList.add('hidden');
            } else {
                uploadView.classList.add('hidden');
                imagesView.classList.remove('hidden');
                renderImages();
            }
        });
    });

    async function handleFileUpload(file) {
        console.log('=== –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò ===');
        console.log('–§–∞–π–ª:', file.name, '–†–∞–∑–º–µ—Ä:', file.size);

        urlInput.value = '';
        uploadError.classList.add('hidden');

        originalContent = dropZone.innerHTML; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        dropZone.innerHTML = '<i class="fas fa-spinner fa-spin"></i><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>';

        const formData = new FormData();
        formData.append('file', file);

        try {
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });

            console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å:', response.status);
            console.log('‚úÖ –û—Ç–≤–µ—Ç OK?:', response.ok);

            const result = await response.json();
            console.log('üì® –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

            if (response.status === 200 && result.status === 'success') {
                console.log('üéâ –£–°–ü–ï–•! –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω');

                const fullUrl = window.location.origin + result.url;
                urlInput.value = fullUrl;

                uploadedImages.push({
                    id: Date.now(),
                    name: file.name,
                    url: result.url,
                    originalName: result.original_name || file.name,
                    filename: result.filename
                });

                saveToLocalStorage();

                dropZone.innerHTML = originalContent;
                uploadError.textContent = '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!';
                uploadError.style.color = 'green';
                uploadError.classList.remove('hidden');
                uploadError.style.display = 'block';

            } else {
                console.log('‚ùå –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê:', result.message);

                // –í–†–ï–ú–ï–ù–ù–´–ô ALERT (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–∑–∂–µ)
                alert(`üö® –°–ï–†–í–ï–† –í–ï–†–ù–£–õ –û–®–ò–ë–ö–£:

–°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}
–°—Ç–∞—Ç—É—Å: ${response.status}
–§–∞–π–ª: ${file.name}
–†–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å (F12) –¥–ª—è –¥–µ—Ç–∞–ª–µ–π`);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                uploadError.textContent = result.message;
                uploadError.classList.remove('hidden');
                uploadError.style.display = 'block';
                uploadError.style.color = 'red';
                uploadError.style.backgroundColor = '#ffeeee';
                uploadError.style.padding = '10px';
                uploadError.style.border = '2px solid red';
                uploadError.style.borderRadius = '5px';
                uploadError.style.margin = '10px 0';
                uploadError.style.fontWeight = 'bold';

                dropZone.innerHTML = originalContent;
            }

        } catch (error) {
            console.error('üí• –°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê:', error);

            // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
            if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
                errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.';
            } else if (error.name === 'AbortError') {
                errorMessage = '–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω';
            }

            // ALERT –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            alert(`üí• –°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê:

–û—à–∏–±–∫–∞: ${error.message}
–§–∞–π–ª: ${file.name}

–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            uploadError.textContent = errorMessage;
            uploadError.classList.remove('hidden');
            uploadError.style.display = 'block';
            uploadError.style.color = 'red';
            uploadError.style.backgroundColor = '#ffeeee';

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dropZone
            dropZone.innerHTML = originalContent;
        }

        console.log('=== –ö–û–ù–ï–¶ –ó–ê–ì–†–£–ó–ö–ò ===');
    }

    browseBtn.addEventListener('click', () => fileInput.click());
    dropZone.addEventListener('click', () => fileInput.click());

    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            handleFileUpload(fileInput.files[0]);
        }
    });

    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
    });

    dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('dragover');
    });

    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        if (e.dataTransfer.files.length > 0) {
            handleFileUpload(e.dataTransfer.files[0]);
        }
    });

    copyBtn.addEventListener('click', async () => {
        if (urlInput.value) {
            try {
                await navigator.clipboard.writeText(urlInput.value);
                copyBtn.textContent = '–°–ö–û–ü–ò–†–û–í–ê–ù–û!';
                setTimeout(() => {
                    copyBtn.textContent = '–ö–û–ü–ò–†–û–í–ê–¢–¨';
                }, 2000);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                urlInput.select();
                document.execCommand('copy');
            }
        }
    });

    function renderImages() {
        imageList.innerHTML = '';

        if (uploadedImages.length === 0) {
            imageList.innerHTML = `
                <p style="text-align:center; color: var(--text-muted); padding: 20px;">
                    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.
                </p>
            `;
            return;
        }

        uploadedImages.forEach(image => {
            const templateClone = imageItemTemplate.content.cloneNode(true);

            templateClone.querySelector('.image-item').dataset.id = image.id;
            const nameSpan = templateClone.querySelector('.image-item__name span');
            nameSpan.textContent = image.originalName || image.name;

            const urlLink = templateClone.querySelector('.image-item__url a');
            urlLink.href = image.url;
            urlLink.textContent = image.url;
            urlLink.target = '_blank';
            urlLink.rel = 'noopener noreferrer';

            imageList.appendChild(templateClone);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    imageList.addEventListener('click', async (e) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        const link = e.target.closest('a');
        if (link) {
            e.preventDefault();
            window.open(link.href, '_blank');
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const deleteButton = e.target.closest('.delete-btn');
        if (deleteButton) {
            const listItem = e.target.closest('.image-item');
            const imageId = parseInt(listItem.dataset.id, 10);

            // –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            const imageToDelete = uploadedImages.find(img => img.id === imageId);
            if (!imageToDelete) return;

            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
                const response = await fetch(`/images/${imageToDelete.filename}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.status === 'success') {
                    // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞
                    uploadedImages = uploadedImages.filter(img => img.id !== imageId);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ LocalStorage
                    saveToLocalStorage();

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                    renderImages();

                    console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞:', imageToDelete.filename);
                } else {
                    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', result.message);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + result.message);
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message);
            }
        }
    });

    setRandomHeroImage();

    if (uploadedImages.length > 0) {
        console.log('–†–µ–Ω–¥–µ—Ä–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', uploadedImages.length);
        renderImages();
    }
});