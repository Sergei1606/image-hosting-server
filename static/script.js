/**
 * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –≤–∞—à—É HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */
document.addEventListener('DOMContentLoaded', () => {
    const heroPage = document.getElementById('hero-page');
    const mainAppPage = document.getElementById('main-app-page');
    const gotoAppButton = document.getElementById('goto-app-button');
    const navButtons = document.querySelectorAll('.app-nav__button');
    const uploadView = document.getElementById('upload-view');
    const imagesView = document.getElementById('images-view');
    const dropZone = document.getElementById('upload-drop-zone');
    const fileInput = document.getElementById('file-input');
    const browseBtn = document.getElementById('browse-btn');
    const uploadError = document.getElementById('upload-error');
    const urlInput = document.getElementById('url-input');
    const copyBtn = document.getElementById('copy-btn');
    const imageList = document.getElementById('image-list');
    const imageItemTemplate = document.getElementById('image-item-template');

    // üî• –†–ê–ù–î–û–ú–ù–´–ï –ö–ê–†–¢–ò–ù–ö–ò –î–õ–Ø –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´
    const heroImages = [
        '/static/images/bird.png',
        '/static/images/cat.png',
        '/static/images/dog1.png',
        '/static/images/dog2.png',
        '/static/images/dog3.png'
    ];

    let originalContent = dropZone.innerHTML;

    // üî• –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    async function loadImagesFromServer() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            const response = await fetch('/images-list-data');

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }

            const serverImages = await response.json();
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverImages.length);

            return serverImages.map(img => ({
                id: img.id,
                filename: img.filename,
                url: `/images/${img.filename}`,
                originalName: img.original_name,
                size: img.size,
                uploadTime: img.upload_time,
                fileType: img.file_type
            }));

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ' + error.message, 'error');
            return [];
        }
    }

    // üî• –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ò–ó –î–ê–ù–ù–´–• –°–ï–†–í–ï–†–ê
    async function renderImages() {
        try {
            const images = await loadImagesFromServer();
            imageList.innerHTML = '';

            if (images.length === 0) {
                imageList.innerHTML = `
                    <li style="text-align:center; color: var(--text-muted); padding: 40px; list-style: none;">
                        <i class="fas fa-image" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
                        <p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.</p>
                        <p style="font-size: 0.9em; margin-top: 8px;">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å"</p>
                    </li>
                `;
                return;
            }

            images.forEach(image => {
                const templateClone = imageItemTemplate.content.cloneNode(true);
                const imageItem = templateClone.querySelector('.image-item');

                // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                imageItem.dataset.id = image.id;
                imageItem.dataset.filename = image.filename;

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                const nameSpan = templateClone.querySelector('.image-item__name span');
                nameSpan.textContent = image.originalName;

                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                const urlLink = templateClone.querySelector('.image-item__url a');
                urlLink.href = image.url;
                urlLink.textContent = image.url;

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∏ –¥–∞—Ç–µ
                const sizeInKB = (image.size / 1024).toFixed(1);
                const uploadDate = new Date(image.uploadTime).toLocaleString('ru-RU');

                const infoDiv = document.createElement('div');
                infoDiv.style.cssText = 'font-size: 0.8em; color: #666; margin-top: 5px;';
                infoDiv.innerHTML = `
                    <span>${sizeInKB} KB</span> ‚Ä¢
                    <span>${uploadDate}</span> ‚Ä¢
                    <span>${image.fileType}</span>
                `;

                nameSpan.parentNode.appendChild(infoDiv);

                imageList.appendChild(templateClone);
            });

            console.log('‚úÖ –û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', images.length);

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
            imageList.innerHTML = `
                <li style="text-align:center; color: #e53e3e; padding: 20px; list-style: none;">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</p>
                </li>
            `;
        }
    }

    // üî• –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
    async function deleteImage(imageId, filename) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "${filename}"?`)) {
            return;
        }

        try {
            console.log('üîÑ –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID:', imageId);
            const response = await fetch(`/delete/${imageId}`, {
                method: 'DELETE'
            });

            const result = await response.json();

            if (result.status === 'success') {
                console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
                showNotification('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ', 'success');

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
                await renderImages();
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', result.message);
                showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + result.message, 'error');
            }
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
            showNotification('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + error.message, 'error');
        }
    }

    // üî• –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê
    async function handleFileUpload(file) {
        console.log('=== –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò ===');
        console.log('–§–∞–π–ª:', file.name, '–†–∞–∑–º–µ—Ä:', file.size);

        urlInput.value = '';
        uploadError.classList.add('hidden');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const originalContent = dropZone.innerHTML;
        dropZone.innerHTML = '<i class="fas fa-spinner fa-spin"></i><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>';

        const formData = new FormData();
        formData.append('file', file);

        try {
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });

            console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å:', response.status);
            const result = await response.json();
            console.log('üì® –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

            if (response.ok && result.status === 'success') {
                console.log('üéâ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');

                const fullUrl = window.location.origin + result.url;
                urlInput.value = fullUrl;

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
                dropZone.innerHTML = originalContent;
                uploadError.textContent = '‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!';
                uploadError.style.color = 'green';
                uploadError.classList.remove('hidden');

                showNotification('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                setTimeout(async () => {
                    navButtons.forEach(btn => btn.classList.remove('active'));
                    document.querySelector('[data-view="images"]').classList.add('active');
                    uploadView.classList.add('hidden');
                    imagesView.classList.remove('hidden');
                    await renderImages();
                }, 1500);

            } else {
                throw new Error(result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dropZone
            dropZone.innerHTML = originalContent;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            uploadError.textContent = '‚ùå ' + error.message;
            uploadError.style.color = 'red';
            uploadError.classList.remove('hidden');

            showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
        }

        console.log('=== –ö–û–ù–ï–¶ –ó–ê–ì–†–£–ó–ö–ò ===');
    }
    // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    function setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        gotoAppButton.addEventListener('click', () => {
            heroPage.classList.add('hidden');
            mainAppPage.classList.remove('hidden');
        });

        navButtons.forEach(button => {
            button.addEventListener('click', async () => {
                const view = button.dataset.view;
                navButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');

                if (view === 'upload') {
                    uploadView.classList.remove('hidden');
                    imagesView.classList.add('hidden');
                } else {
                    // üî•  –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–Ø–ï–ú –ù–ê /images-list
                    window.location.href = '/images-list';
                }
            });
        });

//        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
        browseBtn.addEventListener('click', () => fileInput.click());
        dropZone.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', () => {
            if (fileInput.files.length > 0) {
                handleFileUpload(fileInput.files[0]);
            }
        });

        // Drag & Drop
        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('dragover');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('dragover');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('dragover');
            if (e.dataTransfer.files.length > 0) {
                handleFileUpload(e.dataTransfer.files[0]);
            }
        });

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ URL
        copyBtn.addEventListener('click', async () => {
            if (urlInput.value) {
                try {
                    await navigator.clipboard.writeText(urlInput.value);
                    copyBtn.innerHTML = '<i class="fas fa-check"></i> –°–ö–û–ü–ò–†–û–í–ê–ù–û!';
                    setTimeout(() => {
                        copyBtn.innerHTML = '<i class="fas fa-copy"></i> –ö–û–ü–ò–†–û–í–ê–¢–¨';
                    }, 2000);
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                    urlInput.select();
                    document.execCommand('copy');
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        imageList.addEventListener('click', async (e) => {
            const link = e.target.closest('a');
            if (link) {
                e.preventDefault();
                window.open(link.href, '_blank');
                return;
            }

            const deleteButton = e.target.closest('.delete-btn');
            if (deleteButton) {
                const listItem = e.target.closest('.image-item');
                const imageId = parseInt(listItem.dataset.id, 10);
                const filename = listItem.dataset.filename;

                await deleteImage(imageId, filename);
            }
        });
    }

    // üî• –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    function showNotification(message, type = 'info') {
        document.querySelectorAll('.notification').forEach(notif => notif.remove());

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : 'info'}"></i>
                <span>${message}</span>
            </div>
        `;

        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: ${type === 'success' ? '#48bb78' : type === 'error' ? '#f56565' : '#4299e1'};
            color: white;
            border-radius: 8px;
            z-index: 10000;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideIn 0.3s ease;
            max-width: 400px;
            cursor: pointer;
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }
        }, 5000);

        notification.addEventListener('click', () => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        });
    }

    // üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    function init() {
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
            .notification {
                transition: transform 0.2s ease;
            }
            .notification:hover {
                transform: scale(1.02);
            }
        `;
        document.head.appendChild(style);

        // üî• –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–õ–£–ß–ê–ô–ù–û–ï –§–û–ù–û–í–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –î–õ–Ø –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´
        function setRandomHeroImage() {
            const randomIndex = Math.floor(Math.random() * heroImages.length);
            const randomImage = heroImages[randomIndex];
            heroPage.style.backgroundImage = `url(${randomImage})`;
            console.log('üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ–Ω:', randomImage);
        }

        // üî• –í–´–ó–´–í–ê–ï–ú –§–£–ù–ö–¶–ò–Æ –£–°–¢–ê–ù–û–í–ö–ò –§–û–ù–ê
        setRandomHeroImage();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();

        console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    init();
});